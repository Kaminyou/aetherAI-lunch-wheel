{"version":3,"sources":["logo.svg","components/wheel.js","containers/main.js","App.js","reportWebVitals.js","index.js"],"names":["WheelComponent","segments","segColors","winningSegment","onFinished","primaryColor","contrastColor","buttonText","isOnlyOnce","size","upDuration","downDuration","fontFamily","currentSegment","isStarted","useState","isFinished","setFinished","timerHandle","timerDelay","length","angleCurrent","angleDelta","canvasContext","maxSpeed","Math","PI","upTime","downTime","spinStart","frames","centerX","centerY","useEffect","wheelInit","setTimeout","window","scrollTo","initCanvas","wheelDraw","canvas","document","getElementById","console","log","navigator","userAgent","indexOf","createElement","setAttribute","appendChild","addEventListener","spin","getContext","Date","getTime","setInterval","onTimerTick","draw","duration","progress","finished","sin","clearInterval","clear","drawWheel","drawNeedle","drawSegment","key","lastAngle","angle","ctx","value","save","beginPath","moveTo","arc","lineTo","closePath","fillStyle","fill","stroke","translate","rotate","font","fillText","substr","restore","len","PI2","lineWidth","strokeStyle","textBaseline","textAlign","i","fileStyle","change","floor","clearRect","id","width","height","style","pointerEvents","Wheel","loadFlag","setLoadFlag","listName","setListNameList","restaurantData","setRestaurantData","candidateList","setCandidateList","colorPalette","setcolorPalette","defaultColorPalette","getCandidate","candidateTemp","Object","keys","forEach","element","push","repeats","ceil","array","Array","from","flat","repeatArray","axios","get","then","res","data","catch","error","className","winner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qNAAe,I,oBC2NAA,EAxNQ,SAAC,GAajB,IAZLC,EAYI,EAZJA,SACAC,EAWI,EAXJA,UACAC,EAUI,EAVJA,eACAC,EASI,EATJA,WASI,IARJC,oBAQI,MARW,QAQX,MAPJC,qBAOI,MAPY,QAOZ,MANJC,kBAMI,MANS,OAMT,MALJC,kBAKI,aAJJC,YAII,MAJG,IAIH,MAHJC,kBAGI,MAHS,IAGT,MAFJC,oBAEI,MAFW,IAEX,MADJC,kBACI,MADS,eACT,EACAC,EAAiB,GACjBC,GAAY,EAFZ,EAG8BC,oBAAS,GAHvC,mBAGGC,EAHH,KAGeC,EAHf,KAIAC,EAAc,EACZC,EAAalB,EAASmB,OACxBC,EAAe,EACfC,EAAa,EACbC,EAAgB,KAChBC,EAAWC,KAAKC,GAAL,UAAazB,EAASmB,QAC/BO,EAAS1B,EAASmB,OAASV,EAC3BkB,EAAW3B,EAASmB,OAAST,EAC/BkB,EAAY,EACZC,EAAS,EACPC,EAAU,IACVC,EAAU,IAChBC,qBAAU,WACRC,IACAC,YAAW,WACTC,OAAOC,SAAS,EAAG,KAClB,KACF,IACH,IAAMH,EAAY,WAChBI,IACAC,KAGID,EAAa,WACjB,IAAIE,EAASC,SAASC,eAAe,UACrCC,QAAQC,IAAIC,YACiC,IAAzCA,UAAUC,UAAUC,QAAQ,WAC9BP,EAASC,SAASO,cAAc,WACzBC,aAAa,QAAS,KAC7BT,EAAOS,aAAa,SAAU,KAC9BT,EAAOS,aAAa,KAAM,UAC1BR,SAASC,eAAe,SAASQ,YAAYV,IAE/CA,EAAOW,iBAAiB,QAASC,GAAM,GACvC7B,EAAgBiB,EAAOa,WAAW,OAE9BD,EAAO,WACXtC,GAAY,EACQ,IAAhBI,IACFW,GAAY,IAAIyB,MAAOC,UAEvB/B,EAAWC,KAAKC,GAAKzB,EAASmB,OAC9BU,EAAS,EACTZ,EAAcsC,YAAYC,EAAatC,KAGrCsC,EAAc,WAClB3B,IACA4B,IACA,IAAMC,GAAW,IAAIL,MAAOC,UAAY1B,EACpC+B,EAAW,EACXC,GAAW,EAwBf,IAvBIF,EAAWhC,GACbiC,EAAWD,EAAWhC,EACtBL,EAAaE,EAAWC,KAAKqC,IAAKF,EAAWnC,KAAKC,GAAM,KAEpDvB,GACEU,IAAmBV,GAAkB2B,EAAS7B,EAASmB,QACzDwC,EAAWD,EAAWhC,EACtBL,EACEE,EAAWC,KAAKqC,IAAKF,EAAWnC,KAAKC,GAAM,EAAID,KAAKC,GAAK,GAC3DkC,EAAW,IAObA,EAAWD,EAAW/B,EACtBN,EAAaE,EAAWC,KAAKqC,IAAKF,EAAWnC,KAAKC,GAAM,EAAID,KAAKC,GAAK,IAEpEkC,GAAY,IAAGC,GAAW,IAGhCxC,GAAgBC,EACTD,GAA0B,EAAVI,KAAKC,IAAQL,GAA0B,EAAVI,KAAKC,GACrDmC,IACF5C,GAAY,GACZb,EAAWS,GACXkD,cAAc7C,GACdA,EAAc,EACdI,EAAa,IAIXiB,EAAY,WAChByB,IACAC,IACAC,KAGIR,EAAO,WACXM,IACAC,IACAC,KAGIC,EAAc,SAACC,EAAKC,EAAWC,GACnC,IAAMC,EAAMhD,EACNiD,EAAQvE,EAASmE,GACvBG,EAAIE,OACJF,EAAIG,YACJH,EAAII,OAAO5C,EAASC,GACpBuC,EAAIK,IAAI7C,EAASC,EAASvB,EAAM4D,EAAWC,GAAO,GAClDC,EAAIM,OAAO9C,EAASC,GACpBuC,EAAIO,YACJP,EAAIQ,UAAY7E,EAAUkE,GAC1BG,EAAIS,OACJT,EAAIU,SACJV,EAAIE,OACJF,EAAIW,UAAUnD,EAASC,GACvBuC,EAAIY,QAAQd,EAAYC,GAAS,GACjCC,EAAIQ,UAAYzE,EAChBiE,EAAIa,KAAO,YAAcxE,EACzB2D,EAAIc,SAASb,EAAMc,OAAO,EAAG,IAAK7E,EAAO,EAAI,GAAI,GACjD8D,EAAIgB,WAGAtB,EAAY,WAChB,IAAMM,EAAMhD,EACR8C,EAAYhD,EACVmE,EAAMvF,EAASmB,OACfqE,EAAgB,EAAVhE,KAAKC,GACjB6C,EAAImB,UAAY,EAChBnB,EAAIoB,YAActF,EAClBkE,EAAIqB,aAAe,SACnBrB,EAAIsB,UAAY,SAChBtB,EAAIa,KAAO,OAASxE,EACpB,IAAK,IAAIkF,EAAI,EAAGA,GAAKN,EAAKM,IAAK,CAC7B,IAAMxB,EAAQmB,GAAOK,EAAIN,GAAOnE,EAChC8C,EAAY2B,EAAI,EAAGzB,EAAWC,GAC9BD,EAAYC,EAIdC,EAAIG,YACJH,EAAIK,IAAI7C,EAASC,EAAS,GAAI,EAAGyD,GAAK,GACtClB,EAAIO,YACJP,EAAIQ,UAAY1E,EAChBkE,EAAImB,UAAY,GAChBnB,EAAIoB,YAAcrF,EAClBiE,EAAIS,OACJT,EAAIa,KAAO,YAAcxE,EACzB2D,EAAIQ,UAAYzE,EAChBiE,EAAIsB,UAAY,SAChBtB,EAAIc,SAAS9E,EAAYwB,EAASC,KAClCuC,EAAIU,SAGJV,EAAIG,YACJH,EAAIK,IAAI7C,EAASC,EAASvB,EAAM,EAAGgF,GAAK,GACxClB,EAAIO,YAEJP,EAAImB,UAAY,GAChBnB,EAAIoB,YAActF,EAClBkE,EAAIU,UAGAf,EAAa,WACjB,IAAMK,EAAMhD,EACZgD,EAAImB,UAAY,EAChBnB,EAAIoB,YAAcrF,EAClBiE,EAAIwB,UAAYzF,EAChBiE,EAAIG,YACJH,EAAII,OAAO5C,IAAcC,KACzBuC,EAAIM,OAAO9C,IAAcC,KACzBuC,EAAIM,OAAO9C,EAASC,KACpBuC,EAAIO,YACJP,EAAIS,OACJ,IAAMgB,EAAS3E,EAAeI,KAAKC,GAAK,EACpCoE,EACF7F,EAASmB,OACTK,KAAKwE,MAAOD,GAAoB,EAAVvE,KAAKC,IAAWzB,EAASmB,QAC/C,EACE0E,EAAI,IAAGA,GAAQ7F,EAASmB,QAC5BmD,EAAIsB,UAAY,SAChBtB,EAAIqB,aAAe,SACnBrB,EAAIQ,UAAY1E,EAChBkE,EAAIa,KAAO,cAAgBxE,EAC3BC,EAAiBZ,EAAS6F,GAC1BhF,GAAayD,EAAIc,SAASxE,EAAgBkB,IAAcC,EAAUvB,EAAO,KAErEuD,EAAQ,WACAzC,EACR2E,UAAU,EAAG,EAAG,IAAM,MAE5B,OACE,qBAAKC,GAAG,QAAR,SACE,wBACEA,GAAG,SACHC,MAAM,MACNC,OAAO,MACPC,MAAO,CACLC,cAAevF,GAAcR,EAAa,OAAS,a,uDC9H9CgG,MAlFf,WAAkB,IAAD,EACmBzF,oBAAS,GAD5B,mBACN0F,EADM,KACIC,EADJ,OAEmB3F,mBAAS,WAF5B,mBAEN4F,EAFM,aAG2B5F,mBAAS,KAHpC,mBAGQ6F,GAHR,aAI+B7F,mBAAS,IAJxC,mBAIN8F,EAJM,KAIUC,EAJV,OAK6B/F,mBAAS,IALtC,mBAKNgG,EALM,KAKSC,EALT,OAM2BjG,mBAAS,IANpC,mBAMNkG,EANM,KAMQC,EANR,KAQPC,EAAsB,CAAC,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,WAkBlCC,EAAe,WACjB,IAAIC,EAAgB,GAChBR,EAAezF,OAAS,GACxBwF,EAAgBU,OAAOC,KAAKV,EAAe,KAE/CA,EAAeW,SAAQ,SAAAC,GACfd,KAAYc,GACc,KAAtBA,EAAQd,IAAkBU,EAAcK,KAAKD,EAAQd,OAGjEK,EAAiBK,GACjB,IAAIM,EAAUlG,KAAKmG,KAAKP,EAAcjG,OAAS+F,EAAoB/F,QACnE8F,EA5BgB,SAACW,EAAOF,GACxB,OAAQG,MAAMC,KAAK,CAAE3G,OAAQuG,IAAW,kBAAME,KAAOG,OA2BrCC,CAAYd,EAAqBQ,KAmBrD,OAZA1F,qBAAU,WA9BNiG,IAAMC,IAAI,wFACTC,MAAK,SAACC,GACHvB,EAAkBuB,EAAIC,SAEzBC,OAAM,SAACC,GACJ9B,GAAY,GACZ/D,QAAQ6F,MAAMA,QA0BnB,IAEHvG,qBAAU,WACNmF,IACAzE,QAAQC,IAAI+D,GACZhE,QAAQC,IAAImE,KACb,CAACF,EAAgBF,IAKhBI,EAAc3F,OAAS,EACvB,qBAAKqH,UAAU,eAAf,SAEI,cAAC,EAAD,CACIxI,SAAU8G,EACV7G,UAAW+G,EACX7G,WAAY,SAACsI,GAAD,OAvBL,SAACA,GAChB/F,QAAQC,IAAI8F,GAsBoBtI,CAAWsI,IACnCrI,aAAa,QACbC,cAAc,QACdC,WAAW,OACXC,YAAY,EACZC,KAAM,IACNC,WAAY,IACZC,aAAc,IACdC,WAAW,YAGd6F,EAAY,4CAAqB,wCCnE/BkC,MAXf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sDACA,cAAC,EAAD,UCGOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7G,SAASC,eAAe,SAM1BkG,M","file":"static/js/main.73f07ef2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// revised from src: https://github.com/shekharramola/react-wheel-of-prizes\nimport React, { useEffect, useState, useRef } from 'react'\n\nconst WheelComponent = ({\n  segments,\n  segColors,\n  winningSegment,\n  onFinished,\n  primaryColor = 'black',\n  contrastColor = 'white',\n  buttonText = 'Spin',\n  isOnlyOnce = true,\n  size = 290,\n  upDuration = 100,\n  downDuration = 1000,\n  fontFamily = 'proxima-nova'\n}) => {\n  let currentSegment = ''\n  let isStarted = false\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  const timerDelay = segments.length\n  let angleCurrent = 0\n  let angleDelta = 0\n  let canvasContext = null\n  let maxSpeed = Math.PI / `${segments.length}`\n  const upTime = segments.length * upDuration\n  const downTime = segments.length * downDuration\n  let spinStart = 0\n  let frames = 0\n  const centerX = 300\n  const centerY = 300\n  useEffect(() => {\n    wheelInit()\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  }, [])\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n\n  const initCanvas = () => {\n    let canvas = document.getElementById('canvas')\n    console.log(navigator)\n    if (navigator.userAgent.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas')\n      canvas.setAttribute('width', 1000)\n      canvas.setAttribute('height', 600)\n      canvas.setAttribute('id', 'canvas')\n      document.getElementById('wheel').appendChild(canvas)\n    }\n    canvas.addEventListener('click', spin, false)\n    canvasContext = canvas.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime()\n      // maxSpeed = Math.PI / ((segments.length*2) + Math.random())\n      maxSpeed = Math.PI / segments.length\n      frames = 0\n      timerHandle = setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    const duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      if (winningSegment) {\n        if (currentSegment === winningSegment && frames > segments.length) {\n          progress = duration / upTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n          progress = 1\n        } else {\n          progress = duration / downTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n        }\n      } else {\n        progress = duration / downTime\n        angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n      }\n      if (progress >= 1) finished = true\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true)\n      onFinished(currentSegment)\n      clearInterval(timerHandle)\n      timerHandle = 0\n      angleDelta = 0\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key, lastAngle, angle) => {\n    const ctx = canvasContext\n    const value = segments[key]\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = segColors[key]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillText(value.substr(0, 21), size / 2 + 20, 0)\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    const ctx = canvasContext\n    let lastAngle = angleCurrent\n    const len = segments.length\n    const PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em ' + fontFamily\n    for (let i = 1; i <= len; i++) {\n      const angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n    // Draw a center circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, 50, 0, PI2, false)\n    ctx.closePath()\n    ctx.fillStyle = primaryColor\n    ctx.lineWidth = 10\n    ctx.strokeStyle = contrastColor\n    ctx.fill()\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillStyle = contrastColor\n    ctx.textAlign = 'center'\n    ctx.fillText(buttonText, centerX, centerY + 3)\n    ctx.stroke()\n\n    // Draw outer circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, size, 0, PI2, false)\n    ctx.closePath()\n\n    ctx.lineWidth = 10\n    ctx.strokeStyle = primaryColor\n    ctx.stroke()\n  }\n\n  const drawNeedle = () => {\n    const ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor\n    ctx.fileStyle = contrastColor\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 50)\n    ctx.lineTo(centerX - 20, centerY - 50)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    const change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor\n    ctx.font = 'bold 1.5em ' + fontFamily\n    currentSegment = segments[i]\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50)\n  }\n  const clear = () => {\n    const ctx = canvasContext\n    ctx.clearRect(0, 0, 1000, 800)\n  }\n  return (\n    <div id='wheel'>\n      <canvas\n        id='canvas'\n        width='600'\n        height='600'\n        style={{\n          pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }}\n      />\n    </div>\n  )\n}\nexport default WheelComponent","import React, { useState, useEffect } from \"react\";\nimport WheelComponent from '../components/wheel'\nimport BasicMenu from '../components/manu'\nimport axios from 'axios';\n\nfunction Wheel() {\n    const [loadFlag, setLoadFlag] = useState(true);\n    const [listName, setListName] = useState(\"general\");\n    const [listNameList, setListNameList] = useState([]);\n    const [restaurantData, setRestaurantData] = useState([]);\n    const [candidateList, setCandidateList] = useState([]);\n    const [colorPalette, setcolorPalette] = useState([]);\n\n    const defaultColorPalette = [\"#ff9900\", \"#b36b00\", \"#ffe6bf\", \"#ffcc80\", \"#00b366\", \n                                 \"#007d48\", \"#bfffe4\", \"#80ffc9\", \"#400099\", \"#2d006b\", \n                                 \"#dabfff\", \"#b580ff\" ]\n\n    const repeatArray = (array, repeats) => {\n        return  Array.from({ length: repeats }, () => array).flat();\n    }\n\n    const getRestaurant = () => {\n        axios.get('https://opensheet.vercel.app/1wqfGJb1KAiTt2mhr2oQkfBbfiQrAJapH8BXQ196YZgo/restaurant')\n        .then((res) => { \n            setRestaurantData(res.data);\n        })\n        .catch((error) => { \n            setLoadFlag(false);\n            console.error(error);\n            }\n        )\n    }\n\n    const getCandidate = () => {\n        let candidateTemp = [];\n        if (restaurantData.length > 0) {\n            setListNameList(Object.keys(restaurantData[0]));\n        }\n        restaurantData.forEach(element => {\n            if (listName in element){\n                if (element[listName] !== '') candidateTemp.push(element[listName]);\n            }\n        });\n        setCandidateList(candidateTemp);\n        let repeats = Math.ceil(candidateTemp.length / defaultColorPalette.length);\n        setcolorPalette(repeatArray(defaultColorPalette, repeats));\n    }\n\n    const onFinished = (winner) => {\n        console.log(winner)\n      }\n\n    useEffect(() => {\n        getRestaurant();\n    }, []);\n\n    useEffect(() => {\n        getCandidate();\n        console.log(listName);\n        console.log(candidateList);\n    }, [restaurantData, listName]);\n\n    \n\n    return (\n        candidateList.length > 0 ?(\n        <div className='wheelwrapper'>\n            {/*<BasicMenu restaurantListList={listNameList} setListName={setListName} currentListName={listName}/>*/}\n            <WheelComponent\n                segments={candidateList}\n                segColors={colorPalette}\n                onFinished={(winner) => onFinished(winner)}\n                primaryColor='black'\n                contrastColor='white'\n                buttonText='Spin'\n                isOnlyOnce={false}\n                size={200}\n                upDuration={100}\n                downDuration={1000}\n                fontFamily='Arial'\n            />\n        </ div>\n        ) : (loadFlag ? (<p>Loading ...</p>):(<p>Error!</p>))\n    );\n\n}\n\nexport default Wheel;","import logo from './logo.svg';\nimport './App.css';\nimport Wheel from './containers/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>aetherAI Lunch Wheel</h1>\n        <Wheel />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}